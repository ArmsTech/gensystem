#!/usr/bin/env python
# encoding: utf-8

"""Control Gentoo Linux download and install."""

import argparse
import os
import random
import sys

import gensystem.media as gensystem_media
import gensystem.mirror as gensystem_mirror
import gensystem.utils as gensystem_utils

COLUMN_PADDING = 3
PROGRESS_BAR_LENGTH = 20


def print_columnized_choices(choices):
    """Print choices in a three-column (sorted) format.

    Args:
        choices (dict): Choices to print in a three-column format.

    Example:
        >>> choices = {B:2, A:1, C:3, D:4, E:5, F:6, G:7, H:8, I:9}
        >>> print_columnized_choices(choices)
        [1] A   [4] D   [7] G
        [2] B   [5] E   [8] H
        [3] C   [6] F   [9] I
    """
    items = sorted(choices.keys(), key=choices.get)

    # Add placeholders for pretty formatting
    column_length, placeholders_needed = divmod(len(items), 3)
    # Correct if not even
    if placeholders_needed != 0:
        column_length += 1
        items.extend(['' for placeholder in range(3 - placeholders_needed)])

    middle_index = 2 * column_length
    columnized_rows = zip(
        items[0:column_length],
        items[column_length:middle_index],
        items[middle_index:])

    # 10 or more choices
    has_ten_or_more = column_length >= 10
    column_width = max(len(item) for item in items) + COLUMN_PADDING
    # Print choices in three columns
    for row in columnized_rows:
        print "".join([
            '%s %s' % (
                gensystem_utils.format_choice(choices[item], has_ten_or_more),
                item.ljust(column_width))
            for item in row if item])


def print_choices(choices):
    """Print choices in a (sorted) one-column format.

    Args:
        choices (dict): Choices to print in a three-column format.

    Example:
        >>> choices = {B:2, A:1, C:3, D:4, E:5, F:6, G:7, H:8, I:9}
        >>> print_choices(choices)
        [1] A
        [2] B
        [3] C
        [4] D
        [5] E
        [6] F
        [7] G
        [8] H
        [9] I
    """
    has_ten_or_more = len(choices) >= 10
    for item in sorted(choices.keys(), key=choices.get):
        print "".join(['%s %s' % (
            gensystem_utils.format_choice(
                choices[item], has_ten_or_more), item)])


def download_interactively():
    """Download Gentoo installation media by prompting user for choices."""

    print "\nGENTOO DOWNLOAD\n"

    # SELECT AN ARCHITECTURE
    arch_choices = gensystem_utils.get_choices(
        gensystem_media.SUPPORTED_ARCH.keys())
    print_choices(arch_choices)
    prompt = "\nSELECT ARCHITECTURE (e.g. 1 for amd64/x86_64): "
    arch_chosen = gensystem_utils.get_user_choice(prompt, arch_choices)
    arch_chosen = gensystem_media.SUPPORTED_ARCH[arch_chosen]

    # SELECT A COUNTRY
    country_choices = gensystem_utils.get_choices(
        gensystem_mirror.GENTOO_MIRRORS.keys())
    print_columnized_choices(country_choices)
    country = gensystem_utils.select_country(country_choices)

    print

    # SELECT A MIRROR
    mirrors = gensystem_mirror.GENTOO_MIRRORS[country]
    mirror_choices = gensystem_utils.get_choices(mirrors.keys())
    print_choices(mirror_choices)
    mirror_chosen = gensystem_utils.select_mirror(mirror_choices)

    print

    # SELECT AN INSTALLATION MEDIA
    media_choices = gensystem_utils.get_choices(
        gensystem_media.GENTOO_MEDIA.keys())
    print_choices(media_choices)
    prompt = "\nSELECT INSTALLATION MEDIA: "
    media_chosen = gensystem_utils.get_user_choice(prompt, media_choices)

    media_url = gensystem_media.get_media_file_url(
        mirrors[mirror_chosen], arch_chosen.name,
        gensystem_media.GENTOO_MEDIA[media_chosen])

    downloaded_and_verified = download_and_verify(media_url)
    return downloaded_and_verified


def download_media_file(
        media_file, mirror=None, select_mirror=False, arch='amd64'):
    """Download a specified media file as hands-free as possible.

    Args:
        media_file (str): Media file to download.
        mirror (Optional[str]): Mirror to download media file from.
        select_mirror (Optional[bool]): Whether to manually select mirror.
        arch (Optional[str]): Architecture of media file to download.

    Returns:
        bool: Whether media file was downloaded and verified successfully.

    """
    # If we already know the mirror we can download immediately
    if mirror:
        return download_and_verify(
            gensystem_media.get_media_file_url(mirror, arch, media_file))

    country = gensystem_utils.get_country_code_by_ip(
        gensystem_utils.get_public_ip())

    # GeoIP data does not map 100% accurately to Gentoo countries ;(
    discrepancies = {'US': 'USA'}
    country = discrepancies[country] if country in discrepancies else country

    try:
        mirrors = gensystem_mirror.GENTOO_MIRRORS[country]
    except KeyError:
        country = None

    if country is None:
        country_choices = gensystem_utils.get_choices(
            gensystem_mirror.GENTOO_MIRRORS.keys())
        print
        print_columnized_choices(country_choices)
        country = gensystem_utils.select_country(country_choices)
        mirrors = gensystem_mirror.GENTOO_MIRRORS[country]

    mirror_choices = gensystem_utils.get_choices(mirrors.keys())
    if select_mirror:
        print
        print_choices(mirror_choices)
        mirror_chosen = gensystem_utils.select_mirror(mirror_choices)
    else:
        # It would be nice to select the closest mirror using GeoIP
        mirror_chosen = gensystem_utils.get_choice_value(
            random.randint(1, len(mirror_choices)), mirror_choices)

    media_url = gensystem_media.get_media_file_url(
        mirrors[mirror_chosen], arch, media_file)

    downloaded_and_verified = download_and_verify(media_url)
    return downloaded_and_verified


def download_and_verify(media_url):
    """Download specified media and verify download is not corrupted.

    Args:
        media_url (str): A URL path to the Gentoo media to download.

    Returns:
        bool: Whether media was downloaded and verified successfully.
    """
    def show_download_progress(transferred, size, total):
        # Bytes transferred are block size * blocks transferred
        bytes_transferred = transferred * size
        # Handle files that are smaller than tranfer size
        if total <= size and transferred == 1:
            bytes_transferred = total

        progress = float(bytes_transferred) / total
        hashes = '#' * int(round(progress * PROGRESS_BAR_LENGTH))
        spaces = ' ' * (PROGRESS_BAR_LENGTH - len(hashes))

        sys.stdout.write(
            '\rProgress: [{0}] {1}%'.format(
                ''.join([hashes, spaces]), int(progress * 100)))
        sys.stdout.flush()

    # DOWNLOAD THE MEDIA FILE
    media_file = os.path.join('.', os.path.basename(media_url))
    print "\nDownloading media to %s" % media_file
    media_downloaded, _ = gensystem_utils.download_file(
        media_url, media_file, show_download_progress)

    # VERIFY THE MEDIA FILE
    digest_url = '.'.join([media_url, 'DIGESTS'])
    digest_file = os.path.join('.', os.path.basename(digest_url))
    print "\n\nDownloading digest to %s" % os.path.basename(digest_url)
    digest_downloaded, _ = gensystem_utils.download_file(
        digest_url, os.path.basename(digest_url), show_download_progress)

    if not digest_downloaded:
        print "\n\nDigest could not be downloaded. Skipping verification."
        verified = False
    else:
        print "\n\nVerifying download (%s)" % os.path.join(media_file)
        verified = gensystem_utils.verify_download(media_file, digest_file)

    if verified:
        print "Success: Download (%s) verified." % media_file

    # CLEAN UP unused file
    print "\nCleaning up.",
    os.remove(digest_file)
    print "Done.\n"

    return media_downloaded and verified


def main():
    """Control gensystem.

    Returns:
        int: An exit code; 0 (success) | >0 (failure).
    """
    download_examples = (
        "Examples:\n"
        "  gensystem download -i\n"
        "  gensystem download -f stage3\n"
        "  gensystem download -f stage3 --select-mirror\n"
        "  gensystem -f minimal -m http://www.gtlib.gatech.edu/pub/gentoo/\n")
    parser = argparse.ArgumentParser(
        description='Tool for downloading and installing Gentoo Linux',
        usage='gensystem [-h] <command> [options]',
        epilog="Use 'gensystem <command> -h' for specific subcommand help.")
    subparsers = parser.add_subparsers(
        dest='subparser', metavar='\b\bCommands:', title=None)
    parser_do = subparsers.add_parser(
        'download', help='download installation media',
        usage='gensystem download [options]', epilog=download_examples,
        formatter_class=argparse.RawDescriptionHelpFormatter)
    parser_in = subparsers.add_parser(
        'install', help='install a Gentoo system',
        usage='gensystem install [options]')

    # Add 'download' args with two paths (interactive and non-interactive)
    interactive_group = parser_do.add_mutually_exclusive_group(required=True)

    interactive_group.add_argument(
        "-i", "--interactive", help="perform download interactively",
        action="store_true")

    media_choices = ('minimal', 'stage3', 'hardened', 'nomultilib')
    interactive_group.add_argument(
        "-f", "--file", help='file F: {%s}' % '|'.join(media_choices),
        choices=media_choices, metavar='<F>')

    parser_do.add_argument(
        "-m", "--mirror",
        help="mirror to download file from (base URL)", metavar='<M>')

    arch_choices = ('amd64',)
    parser_do.add_argument(
        "-a", "--arch",
        help='architecture A: {%s}' % '|'.join(arch_choices),
        choices=arch_choices, metavar='<A>', default='amd64')

    parser_do.add_argument(
        "-s", "--select-mirror",
        help="select mirror (default: closest by GeoIP)", action="store_true")

    success = False
    args = parser.parse_args()

    if args.subparser == 'download':
        if args.interactive:
            success = download_interactively()
        elif args.file:
            success = download_media_file(
                args.file, args.mirror, args.select_mirror, args.arch)
        else:
            # 'download' with no options shows help
            parser_do.print_help()
    elif args.subparser == 'install':
        raise NotImplementedError("Install has not been implemented.")

    # For now we'll only handle success and a general error
    return 0 if success else 1


if __name__ == '__main__':
    sys.exit(main())
