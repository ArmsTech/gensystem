#!/usr/bin/env python
# encoding: utf-8

"""Control Gentoo Linux download and install."""

import argparse
import os
import sys

import gensystem.media as gensystem_media
import gensystem.mirror as gensystem_mirror
import gensystem.utils as gensystem_utils

COLUMN_PADDING = 3


def print_columnized_choices(choices):
    """Print choices in a three-column (sorted) format.

    Args:
        choices (dict): choices to print in a three-column format.

    Example:
        >>> choices = {B:2, A:1, C:3, D:4, E:5, F:6, G:7, H:8, I:9}
        >>> print_columnized_choices(choices)
        [1] A   [4] D   [7] G
        [2] B   [5] E   [8] H
        [3] C   [6] F   [9] I
    """
    items = sorted(choices.keys())

    # Add placeholders for pretty formatting
    column_length, placeholders_needed = divmod(len(items), 3)
    # Correct if not even
    if placeholders_needed != 0:
        column_length += 1
        items.extend(['' for placeholder in range(3 - placeholders_needed)])

    middle_index = 2 * column_length
    columnized_rows = zip(
        items[0:column_length],
        items[column_length:middle_index],
        items[middle_index:])

    # Print choices in three columns
    column_width = max(len(item) for item in items) + COLUMN_PADDING
    for row in columnized_rows:
        print "".join([
            '%s %s' % (
                gensystem_utils.format_choice(choices[item], column_length),
                item.ljust(column_width))
            for item in row if item])


def print_choices(items):
    """Print choices in a one-column format.

    :param items: items to print in a single column
    :type items: list
    :return: None
    :rtype: None

    :Example:

    Input:
        [A, B, C, D, E, F, G, H, I]

    Output:
        [1] A
        [2] B
        [3] C
        [4] D
        [5] E
        [6] F
        [7] G
        [8] H
        [9] I

    """
    items.sort()
    choices = {item: choice for choice, item in enumerate(items, 1)}
    column_length = len(choices)

    for item in items:
        print "".join(['%s %s' % (
            gensystem_utils.format_choice(
                choices[item], column_length), item)])

    return choices


def download_interactively():
    """Download Gentoo installation media by prompting user for choices.

    :return: None
    :rtype: None

    """
    print "\nGENTOO DOWNLOAD\n"

    # SELECT AN ARCHITECTURE
    arch_choices = print_choices(gensystem_media.SUPPORTED_ARCH.keys())
    arch_chosen = gensystem_utils.get_user_choice(
        "\nSELECT ARCHITECTURE (e.g. 1 for amd64/x86_64): ", arch_choices)
    arch_chosen = gensystem_media.SUPPORTED_ARCH[arch_chosen]

    # SELECT A COUNTRY
    country_choices = gensystem_utils.get_choices(
        sorted(gensystem_mirror.GENTOO_MIRRORS.keys()))
    print_columnized_choices(country_choices)
    country = gensystem_utils.get_user_choice(
        "\nSELECT COUNTRY (e.g. 29 for USA): ", country_choices)

    print

    # SELECT A MIRROR
    mirrors = gensystem_mirror.GENTOO_MIRRORS[country]
    mirror_choices = print_choices(mirrors.keys())
    mirror_chosen = gensystem_utils.get_user_choice(
        "\nSELECT MIRROR (Note: * indicates mirrors that support IPv6): ",
        mirror_choices)

    print

    # SELECT AN INSTALLATION MEDIA
    media_choices = print_choices(gensystem_media.GENTOO_MEDIA.keys())
    media_chosen = gensystem_utils.get_user_choice(
        "\nSELECT INSTALLATION MEDIA: ",
        media_choices)
    media_chosen = getattr(
        arch_chosen, gensystem_media.GENTOO_MEDIA[media_chosen])

    releases_url = gensystem_mirror.GENTOO_RELEASES_TEMPLATE % (
        arch_chosen.name, media_chosen)
    media_folder_and_regex = os.path.join(
        mirrors[mirror_chosen], releases_url[:-1])
    media_url = gensystem_media.get_media_file_url(
        *media_folder_and_regex.split('::'))
    print media_url

    # DOWNLOAD THE MEDIA FILE


def main():
    """Control gensystem.

    :return: exit code; 0 (success) | >0 (failure)
    :rtype: int

    """
    parser = argparse.ArgumentParser(
        description='Tool for downloading and installing Gentoo Linux',
        usage='gensystem [-h] <command> [options]')
    subparsers = parser.add_subparsers(dest='subparser')
    parser_do = subparsers.add_parser(
        'download', help='show download help',
        usage='gensystem download [options]')
    parser_in = subparsers.add_parser(
        'install', help='show install help',
        usage='gensystem install [options]')

    # Add 'download' arguments
    parser_do.add_argument(
        "-i", "--interactive", help="perform download interactively",
        action="store_true")

    args = parser.parse_args()

    if args.subparser == 'download':
        if args.interactive:
            download_interactively()
        else:
            # 'download' with no options shows help
            parser_do.print_help()
    elif args.subparser == 'install':
        raise NotImplementedError("Install has not been implemented.")

    return 0


if __name__ == '__main__':
    sys.exit(main())
